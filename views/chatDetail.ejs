<!DOCTYPE html>
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="/css/main.css" rel="stylesheet">
  </head>
  <body class = "grey-bg" onload = myInit()>
    <%- include('nav.ejs') %>
    <div class="detail-bg" id="detail">
      <div class="chat-screen" id="chat-screen">
        <div class="chat-box enter">
          <span class="enter-color"><b><%= result.member.invitor_username%>님이 <%= result.member.invitee_username%>님을 초대하셨습니다</b></span>
        </div>
        <% for (let i = 0; i < chatLogs.length; i++) { %>
          <% if (chatLogs[i].poster.equals(user._id)) { %>  <!--objectId끼리 비교는 ==가 아니라 objectId.equals(비교할objectId) 식으로해야 오브젝끼리 내용 비교가 가능하다-->
            <div class="chat-box mine">
              <span class="my-color" id="time" data-date="<%=chatLogs[i].date%>"><%=chatLogs[i].text%></span>
            </div>
            <!--<div class="time-box mine"><p><%=chatLogs[i].date%></p></div>-->
          <% } else { %>
            <div class="chat-box other">
              <span class="other-color" id="time" data-date="<%=chatLogs[i].date%>"><%=chatLogs[i].text%></span>
            </div>
            <!--<div class="time-box"><p><%=chatLogs[i].date%></p></div>-->
          <% } %>
        <% } %>
      </div>      
    </div>
    <div class="chat-placeholder">  </div>
    <div class="footer">
      <div class="chat-form">
        <input class="chat-input">
        <button class="btn btn-success">전송</button>
      </div>
  </div>    

  <!--웹소켓을 이용하기위한 코드, 특정html/ejs 파일마다 웹소켓을 이용하려면 아래 코드가 있어야함-->
  <script src="https://cdn.jsdelivr.net/npm/socket.io@4.7.2/client-dist/socket.io.min.js"></script>
  <script>
    function myInit() {
      scrollDownAndFocus();
      showClock();
    }

    function convertTime(rawDate){
      let day = rawDate.substr(4, 6)
      let hour = rawDate.substr(16, 2)
      if (hour > 12) {
        hour = "PM " + (hour-12) 
      } else {
        hour = "AM " + hour
      }
      let min = rawDate.substr(19, 2)
      
      let msg = day + " " + hour + ":" + min
      return msg
    }

    const scrollingElement = (document.scrollingElement || document.body)
    const scrollToBottom = () => {
      scrollingElement.scrollTop = scrollingElement.scrollHeight
    }

    function scrollDownAndFocus() {
      scrollToBottom()
      document.querySelector('.chat-input').focus()
    }

    function inputFocus() {
      document.querySelector('.chat-input').focus()
    }

    const socket = io() //웹소켓 연결코드
    socket.emit('ask-join', '<%=result._id%>') //유저 -> 서버 데이터 전송, 서버에 ask-join 이름으로 클릭한 해당 채팅방에 join 신청
    function sendChat() {
      let text = document.querySelector('.chat-input').value
      if(text) {
        socket.emit('message-send', { msg: text, room: '<%=result._id%>', poster: '<%=user._id%>', posterUsername: '<%=user.username%>'})
        document.querySelector('.chat-input').value = ""
      }
    }
    
    document.querySelector('.btn-success').addEventListener('click',
      function () {  //.chat-button 버튼을 누를시, 1번방에 '반가워'를 보내는 요청을 서버에
        sendChat()
      }
    )

    document.querySelector('.chat-input').addEventListener('keydown',
      function (e) {  //.chat-button 버튼을 누를시, 1번방에 '반가워'를 보내는 요청을 서버에
        if(e.code === "Enter"){
          sendChat()
        }
      }
    )

    socket.on('message-broadcast', (data) => {
      document.querySelector('.chat-screen').insertAdjacentHTML('beforeend', 
        data.posterId == '<%=user._id%>'?`<div class="chat-box mine"><span class="my-color" id="time" data-date="${data.date}">${data.msg}</span><span style="display:none">${data.posterId}</span></div>`:`<div class="chat-box"><span class="other-color" id="time" data-date="${data.date}">${data.msg}</span><span style="display:none">${data.posterId}</span></div>`
      )   //``를 쓰면 안에 변수를 ${변수} 식으로 쉽게 쓸수있다
      
      scrollToBottom()
      inputFocus()
    }) //서버 -> 유저 데이터 수신시

    for(let i = 0; i < document.querySelectorAll('.my-color').length; i++) {
      document.querySelectorAll('.my-color')[i].addEventListener('click',
      function(e) {
        let timeEl = document.querySelector('.time-box')
        let convertedTime = convertTime(e.target.dataset.date)
        if(timeEl) {
          timeEl.parentNode.removeChild(timeEl);
        } else {
          document.querySelectorAll('.chat-box.mine')[i].insertAdjacentHTML('afterend', `<div class="time-box" style="justify-content:end;"><p>${convertedTime}</p></div>`)
        }
      })
    }

    for (let j = 0; j < document.querySelectorAll('.other-color').length; j++) {
      document.querySelectorAll('.other-color')[j].addEventListener('click',
      function(e) {
        let otherTimeEl = document.querySelector('.time-box')
        let convertedTime = convertTime(e.target.dataset.date)
        if(otherTimeEl) {
          otherTimeEl.parentNode.removeChild(otherTimeEl);
        } else {
          document.querySelectorAll('.chat-box.other')[j].insertAdjacentHTML('afterend', `<div class="time-box"><p>${convertedTime}</p></div>`)
        }
      })
    }
  </script>
  </body>
</html>